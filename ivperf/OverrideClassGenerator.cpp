#include <Inventor/SoInteraction.h>
#include <Inventor/SbName.h>
#include <Inventor/SbString.h>
#include <Inventor/nodes/SoNode.h>
#include <Inventor/lists/SoTypeList.h>
#include <Inventor/nodekits/SoBaseKit.h>


const char filename[] = "OverrideNodes.cpp";


const char header[] = 
"// This file is automatically generated by OverrideClassGenerator.\n"
"// It overrides all Inventor classes derived from SoNode by its own nodes.\n"
"\n\n"
"#include <Inventor/lists/SoTypeList.h>\n"
"#include \"OverrideNodes.h\"\n"
"\n\n"
"static SoTypeList overridenClasses(100);\n"
"\n\n";



SbString getClassName(const SoType &type)
{
  SbString string("So");
  SbString name(type.getName());
  if (name.find("So") == 0)  string = name;
  else  string += name;
  return string;
}



int main(int argc, char **argv)
{
  SoInteraction::init();

  // get list of all classes derived from SoNode
  SoTypeList typeList;
  SoType::getAllDerivedFrom(SoNode::getClassTypeId(), typeList);

  FILE *f = fopen(filename, "w");
  if (!f) {
    fprintf(stderr, "Error opening file \"%s\"\n\n", filename);
    exit(-1);
  }

  // print file header
  fprintf(f, "%s", &header[0]);

  // create override code for each class
  int i,c = typeList.getLength();
  for (i=0; i<c; i++) {

    SoType type = typeList[i];
    SbString string = getClassName(type);
    const char *name = string.getString();

    // skip the class if it has no instantiation method
    // since it can be class with abstract methods and try to instantiate
    // such classes cause compiler errors. PCJohn 2005-11-05
    if (!type.canCreateInstance())
      continue;

    // make apropriate include
    if (string.find("VRML") != -1)
      // VRML nodes
      if (string == SbString("SoVRMLInline"))
        // ignore SoVRMLInline
        // FIXME: bug in Coin, remove after correcting the problem.
        // SoVRMLInline has private destructor -> can not derive from it. PCJohn 2005-11-05
        continue;
      else
        fprintf(f, "#include <Inventor/VRMLnodes/%s.h>\n", name);
    else
    if (string.find("Kit") != -1)
      // node kits
      fprintf(f, "#include <Inventor/nodekits/%s.h>\n", name);
    else
    if (string.find("Dragger") != -1)
      // draggers
      fprintf(f, "#include <Inventor/draggers/%s.h>\n", name);
    else
    if (string.find("Manip") != -1)
      // manipulators
      fprintf(f, "#include <Inventor/manips/%s.h>\n", name);
    else
    if (string.find("SoProto") != -1)
      // SoProto, SoProtoInstance
      fprintf(f, "#include <Inventor/misc/%s.h>\n", name);
    else
    if (string == SbString("SoNodeEngine"))
      // SoNodeEngine
      fprintf(f, "#include <Inventor/engines/%s.h>\n", name);
    else
    if (string == SbString("SoUnknownNode"))
      // ignore SoUnknownEngine
      // FIXME: bug in Coin? Where is the header for SoUnknownNode? PCJohn 2005-11-05
      continue;
    else
      // regular nodes
      fprintf(f, "#include <Inventor/nodes/%s.h>\n", name);

    // create class
    fprintf(f, "OVERRIDE(%s);\n", name);
  }
  fprintf(f, "\n\n");

  // create function for overriding all node classes at once
  fprintf(f, "void overrideClasses()\n");
  fprintf(f, "{\n");
  for (i=0; i<c; i++) {

    SoType type = typeList[i];
    SbString string = getClassName(type);
    const char *name = string.getString();

    // skip the class if it has no instantiation method
    // since it can be class with abstract methods and trying to instantiate
    // such classes causes compiler errors. PCJohn 2005-11-05
    if (!type.canCreateInstance())
      continue;

    // skip just SoUnknownNode and SoVRMLInline; see comments above
    if (string == SbString("SoUnknownNode") || string == SbString("SoVRMLInline"))
      continue;

    fprintf(f, "  SoType::overrideType(%s::getClassTypeId(), %sOverride::createInstance);\n", name, name);
    fprintf(f, "  overridenClasses.append(%s::getClassTypeId());\n", name);
  }
  fprintf(f, "}\n");
  fprintf(f, "\n\n");

  // append getOverridenClasses
  fprintf(f, "const SoTypeList* getOverridenClasses()\n");
  fprintf(f, "{\n");
  fprintf(f, "  return &overridenClasses;\n");
  fprintf(f, "}\n");

  if (fclose(f) != 0) {
    fprintf(stderr, "Error while closing file \"%s\"\n\n", filename);
    exit(-1);
  }

  fprintf(stderr, "New OverrideNodes.cpp was generated successfully.\n\n");

  return 0;
}
